package com.ginkgocap.ywxt.metadata.dao.userTag.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.springframework.stereotype.Repository;

import com.ginkgocap.ywxt.metadata.dao.userTag.UserTagDao;
import com.ginkgocap.ywxt.metadata.model.Code;
import com.ginkgocap.ywxt.metadata.model.UserTag;
import com.ibatis.sqlmap.client.SqlMapClient;
/**
 * 标签的DAO实现类
 * @author hdy
 * @date 2014-10-21
 */
@Repository("userTagDAO")
public class UserTagDaoImpl extends SqlMapClientDaoSupport implements UserTagDao {

    @Resource
    SqlMapClient metadataSqlMapClient;

    @PostConstruct
    public void initSqlMapClient() {
        super.setSqlMapClient(metadataSqlMapClient);
    }
    @Override
    public UserTag selectByPrimarKey(long id) {
        return (UserTag) getSqlMapClientTemplate().queryForObject("tb_user_tags.selectByPrimaryKey", id);
    }

    @Override
    public UserTag insert(UserTag UserTag) {
        Long id = (Long) getSqlMapClientTemplate().insert("tb_user_tags.insertUserTag", UserTag);
        if (id != null) {
            UserTag.setTagId(id);
            return UserTag;
        } else {
            return null;
        }
    }

    @Override
    public void update(UserTag UserTag) {
        getSqlMapClientTemplate().update("tb_user_tags.updateUserTag", UserTag);
    }

    @Override
    public void delete(long id) {
        getSqlMapClientTemplate().delete("tb_user_tags.deleteUserTag", id);
    }

	@Override
	public void deleteByTagNameAndUserId(long userId, String tagName) {
		// TODO Auto-generated method stub
		  Map<String, Object> map = new HashMap<String, Object>();
	        map.put("userId", userId);
	        map.put("tagName", tagName);
	        getSqlMapClientTemplate().delete("tb_user_tags.deleteByTagNameAndUserId", map);
		
	}
	@Override
	public List<UserTag> selectByUserId(long  userId, long startRow, int pageSize) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("userId", userId);
	     map.put("startRow", startRow);
	     map.put("pageSize", pageSize);
		return getSqlMapClientTemplate().queryForList("tb_user_tags.selectByUserId", map);
	}
	/**
	 * 根据用户id,标签名查找
	 */
	@Override
	public List<UserTag> selectByTagNameAndUserId(long userId, String tagName) {
		// TODO Auto-generated method stub
		  Map<String, Object> map = new HashMap<String, Object>();
	        map.put("userId", userId);
	        map.put("tagName", tagName);
		return getSqlMapClientTemplate().queryForList("tb_user_tags.selectByTagNameAndUserId", map);
	}
	/**
	 * 根据用户id获得系统和用户的标签列表
	 */
	@Override
	public List<UserTag> selectByUserIdAndSys(long userId, long startRow,int pageSize) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("userId", userId);
	     map.put("startRow", startRow);
	     map.put("pageSize", pageSize);
		return getSqlMapClientTemplate().queryForList("tb_user_tags.selectByUserIdAndSys", map);
	}
	@Override
	public long countByUserId(long userId) {
		// TODO Auto-generated method stub
		return  (Long) getSqlMapClientTemplate().queryForObject("tb_user_tags.countByUserId",userId);

	}
	@Override
	public long countByUserIdAndSys(long userId) {
		// TODO Auto-generated method stub
		return  (Long) getSqlMapClientTemplate().queryForObject("tb_user_tags.countByUserIdAndSys",userId);
	}
	@Override
	public List<UserTag> selectTagNameInUserIdAndSys(long userId, String tagName) {
		// TODO Auto-generated method stub
		  Map<String, Object> map = new HashMap<String, Object>();
	        map.put("userId", userId);
	        map.put("tagName", tagName);
		return getSqlMapClientTemplate().queryForList("tb_user_tags.selectTagNameInUserIdAndSys", map);
	}
	@Override
	public List<UserTag> searchPrefixPageByUserIdAndSys(long userId,
			String[] keyword, long startRow, int pageSize) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("userId", userId);
		map.put("startRow", startRow);
	     map.put("pageSize", pageSize);
	     map.put("keywordArray", keyword);
		return getSqlMapClientTemplate().queryForList("tb_user_tags.searchPrefixPageByUserIdAndSys", map);
	}
	@Override
	public List<UserTag> searchContainPageByUserIdAndSys(long userId,
			String[] keyword, long startRow, int pageSize) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("userId", userId);
		map.put("startRow", startRow);
	     map.put("pageSize", pageSize);
	     map.put("keywordArray", keyword);
		return getSqlMapClientTemplate().queryForList("tb_user_tags.searchContainPageByUserIdAndSys", map);
	}
	@Override
	public long countBySys() {
		// TODO Auto-generated method stub
		return (Long) getSqlMapClientTemplate().queryForObject("tb_user_tags.countBySys");
	}
	@Override
	public List<UserTag> selectPageBySys(long startRow, int pageSize) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("startRow", startRow);
	     map.put("pageSize", pageSize);
		return getSqlMapClientTemplate().queryForList("tb_user_tags.selectPageBySys", map);
	}




}
