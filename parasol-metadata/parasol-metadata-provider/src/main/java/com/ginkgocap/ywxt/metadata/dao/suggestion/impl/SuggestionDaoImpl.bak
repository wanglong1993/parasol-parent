package com.ginkgocap.ywxt.metadata.dao.suggestion.impl;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.springframework.stereotype.Repository;

import com.ginkgocap.ywxt.metadata.dao.suggestion.SuggestionDao;
import com.ginkgocap.ywxt.metadata.model.Dic;
import com.ginkgocap.ywxt.metadata.model.Suggestion;
import com.ibatis.sqlmap.client.SqlMapClient;
/**
 * 类型的DAO实现类
 * @author lk
 *
 */
@Repository("suggestionDAO")
public class SuggestionDaoImpl extends SqlMapClientDaoSupport implements SuggestionDao {

    @Resource
    SqlMapClient metadataSqlMapClient;

    @PostConstruct
    public void initSqlMapClient() {
        super.setSqlMapClient(metadataSqlMapClient);
    }
    public Suggestion selectByPrimarKey(long id) {
        return (Suggestion) getSqlMapClientTemplate().queryForObject("tb_suggestion.selectByPrimaryKey", id);
    }
	@Override
	public Suggestion insert(Suggestion suggestion) {
		try{
        Long id = (Long) getSqlMapClientTemplate().insert("tb_suggestion.insertSuggestion", suggestion);
        if (id != null) {
        	suggestion.setId(id);
            return suggestion;
        } else {
            return null;}
        }catch(Exception e){e.printStackTrace();return null;}
	}
	@Override
	public Suggestion add(Suggestion suggestion) {
	    try{
	        Long id = (Long) getSqlMapClientTemplate().insert("tb_suggestion.addSuggestion", suggestion);
	        if (id != null) {
	            suggestion.setId(id);
	            return suggestion;
	        } else {
	            return null;}
	    }catch(Exception e){e.printStackTrace();return null;}
	}
	@Override
	public void update(Suggestion suggestion) {
		getSqlMapClientTemplate().update("tb_suggestion.updateSuggestion", suggestion);
	}
	@Override
	public void delete(long id) {
		getSqlMapClientTemplate().delete("tb_suggestion.deleteSuggestion", id);
	}
	@Override
	public List<Suggestion> selectByParams(long id, String user_name,
			String problemTitle, String cstart,String cend,String fstart,String fend,String feedbackType, Integer start,
			Integer size) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (id > -1)
			map.put("id", new Long(id));
		if(StringUtils.isNotBlank(user_name))
        	map.put("user_name", user_name);
        if(StringUtils.isNotBlank(problemTitle))
        	map.put("problemTitle", problemTitle);
        if(StringUtils.isNotBlank(feedbackType))
        	map.put("feedbackType", feedbackType);
        if(StringUtils.isNotBlank(cstart))
        	map.put("cstart", cstart);
        if(StringUtils.isNotBlank(cend))
        	map.put("cend", cend);
        if(StringUtils.isNotBlank(fstart))
        	map.put("fstart", fstart);
        if(StringUtils.isNotBlank(fend))
        	map.put("fend", fend);
        map.put("start", start);
        map.put("size", size);
        List<Suggestion> list = getSqlMapClientTemplate().queryForList("tb_suggestion.selectByParams", map);
        return list;
	}
	@Override
	public Long selectByParamsCount(long id, String user_name,
			String problemTitle, String cstart, String cend, String fstart,
			String fend, String feedbackType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if(StringUtils.isNotBlank(user_name))
        	map.put("user_name", user_name);
        if(StringUtils.isNotBlank(problemTitle))
        	map.put("problemTitle", problemTitle);
        if(StringUtils.isNotBlank(feedbackType))
        	map.put("feedbackType", feedbackType);
        if(StringUtils.isNotBlank(cstart))
        	map.put("cstart", cstart);
        if(StringUtils.isNotBlank(cend))
        	map.put("cend", cend);
        if(StringUtils.isNotBlank(fstart))
        	map.put("fstart", fstart);
        if(StringUtils.isNotBlank(fend))
        	map.put("fend", fend);
        
		return (Long) getSqlMapClientTemplate().queryForObject(
				"tb_suggestion.selectByParamsCount", map);
	}
    @Override
    public List<Dic> selectDics() {
        return getSqlMapClientTemplate().queryForList("tb_dic.query");
    }
}
