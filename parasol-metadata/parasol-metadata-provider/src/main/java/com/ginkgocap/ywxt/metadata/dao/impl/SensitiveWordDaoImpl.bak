package com.ginkgocap.ywxt.metadata.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.springframework.stereotype.Component;

import com.ginkgocap.ywxt.metadata.dao.SensitiveWordDao;
import com.ginkgocap.ywxt.metadata.model.CodeDy;
import com.ginkgocap.ywxt.metadata.model.SensitiveWord;
import com.ibatis.sqlmap.client.SqlMapClient;
/**
 * 敏感词dao实现
 * @author liubang
 * 2014-4-30 13:30:28
 */
@Component("ensitiveWordDao")
public class SensitiveWordDaoImpl extends SqlMapClientDaoSupport  implements SensitiveWordDao {
	@Resource
	SqlMapClient metadataSqlMapClient;

	@PostConstruct
	public void initSqlMapClient() {
		super.setSqlMapClient(metadataSqlMapClient);
	}
	@Override
	public SensitiveWord findOne(long id) {
		SensitiveWord ensitiveWord = (SensitiveWord) getSqlMapClientTemplate().queryForObject(
				"tb_sensitive_word.findOne", id);
		return ensitiveWord;
	}

	@Override
	public SensitiveWord save(SensitiveWord sensitiveWord) {
		Long id = (Long) getSqlMapClientTemplate().insert(
				"tb_sensitive_word.save", sensitiveWord);
		if (id != null) {
			sensitiveWord.setId(id);
			return sensitiveWord;
		} else {
			return null;
		}
	}

	@Override
	public SensitiveWord update(SensitiveWord sensitiveWord) {
		int i = getSqlMapClientTemplate().update("tb_sensitive_word.update", sensitiveWord);
		if(i>0){
			return sensitiveWord;
		}else{
			return null;
		}
	}

	@Override
	public List<SensitiveWord> findByParmas(Map<String, Object> param) {
		List<SensitiveWord> list = (List<SensitiveWord>)getSqlMapClientTemplate().queryForList("tb_sensitive_word.findByParmas", param);
		return list;
	}

	@Override
	public long countByParmas(Map<String, Object> param) {
		return (Long)getSqlMapClientTemplate().queryForObject("tb_sensitive_word.countByParmas",param);
	}
	@Override
	public int delete(long id) {
		return getSqlMapClientTemplate().delete("tb_sensitive_word.delete",id);
	}
	@Override
	public int deleteIds(Long[] ids) {
		Map<String, Object> param = new HashMap<String, Object>();
		if(ids.length==0){
			return 0;
		}else{
			param.put("ids", ids);
			return getSqlMapClientTemplate().delete("tb_sensitive_word.deleteIds",param);
		}
	}
	@Override
	public List<SensitiveWord> check(String word, long id) {
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("word", word);
		param.put("id", id);
		List<SensitiveWord> list = (List<SensitiveWord>)getSqlMapClientTemplate().queryForList("tb_sensitive_word.check", param);
		return list;
	}
	
//	@Override
//	public boolean batchInsertSelective(
//			List<SensitiveWord> sensitiveWords) {
//		boolean result = false;
//		try {
//			getSqlMapClientTemplate().insert("tb_sensitive_word.batchInsertSelective", sensitiveWords);
//			result = true;
//		} catch (Exception e) {
//			result = false;
//		}
//		return result;
//	}

}
