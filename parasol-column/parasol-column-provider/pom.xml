<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.ginkgocap.parasol</groupId>
    <artifactId>parasol-column</artifactId>
    <version>1.0.2-SNAPSHOT</version>
  </parent>
  <groupId>com.ginkgocap.parasol</groupId>
  <artifactId>parasol-column-provider</artifactId>
  <version>1.0.2-SNAPSHOT</version>
  <name>parasol-column-provider</name>
  <url>http://maven.apache.org</url>
  <properties>
		<skip_maven_deploy>true</skip_maven_deploy>
	</properties>

	<dependencies>
	<dependency>
				<groupId>org.junit</groupId>
				<artifactId>com.springsource.org.junit</artifactId>
			</dependency>
		<dependency>
			<groupId>com.ginkgocap.parasol</groupId>
			<artifactId>parasol-column-api</artifactId>
			<version>1.0.2-SNAPSHOT</version>
		</dependency>
		<dependency>
		  <groupId>org.glassfish.jersey.bundles.repackaged</groupId>
	  		<artifactId>jersey-guava</artifactId>
	 	 	<version>2.15</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>3.1.0.RELEASE</version>
		</dependency>
		<!-- spring begin -->

		<!-- mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis.generator</groupId>
			<artifactId>mybatis-generator-core</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- spring base -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>

		<!-- spring aop -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
		</dependency>
		<!-- spring end -->

		<!-- spring orm -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>
		<!-- spring integration -->
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-redis</artifactId>
			<!-- <exclusions>
				<exclusion>
					<artifactId>jedis</artifactId>
					<groupId>redis.clients</groupId>
				</exclusion>
			</exclusions> -->
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-stream</artifactId>
		</dependency>
		<!-- web begin -->
		<!-- spring mvc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>
		<!-- json -->
		<dependency>
			<groupId>net.sf.json-lib</groupId>
			<artifactId>json-lib</artifactId>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>
		<!-- logging begin -->

		<!-- JSON begin -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.1.3</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jaxb-annotations</artifactId>
			<version>2.1.3</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-lgpl</artifactId>
			<version>1.9.9</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.9</version>
		</dependency>
		<!-- JSON end -->

		<!-- logback -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-access</artifactId>
			<version>1.0.7</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.7</version>
		</dependency>
		<!-- slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.4</version>
		</dependency>

		<!-- slf4j-log4j绑定 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.4</version>
		</dependency>

		<!-- java concurrency in practie -->
		<dependency>
			<groupId>net.jcip</groupId>
			<artifactId>jcip-annotations</artifactId>
		</dependency>
		<!-- optional datasource pool -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-pool</groupId>
			<artifactId>commons-pool</artifactId>
		</dependency>
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
		</dependency>
		<dependency>
			<groupId>${jdbc.groupId}</groupId>
			<artifactId>${jdbc.artifactId}</artifactId>
			<version>${jdbc.version}</version>
		</dependency>
		<!-- database access end -->
		<!-- ibatis -->
		<dependency>
			<groupId>org.apache.ibatis</groupId>
			<artifactId>ibatis-sqlmap</artifactId>
			<version>2.3.4.726</version>
		</dependency>
		<!-- spring mongodb mapper -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
			<version>1.1.0.M1</version>
		</dependency>
		<!-- spring mongodb mapper end -->
		<!-- mongodb- -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>2.7.3</version>
		</dependency>
		<!-- mongodb end -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.1</version>
		</dependency>
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
		</dependency>
		<!-- dubbo 服务注册方式 start -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>dubbo</artifactId>
			<version>2.5.3</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss.netty</groupId>
			<artifactId>netty</artifactId>
			<version>3.2.7.Final</version>
		</dependency>
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.16.1-GA</version>
		</dependency>
		<dependency>
			<groupId>org.apache.zookeeper</groupId>
			<artifactId>zookeeper</artifactId>
			<version>3.3.3</version>
		</dependency>
		<dependency>
			<groupId>com.github.sgroschupf</groupId>
			<artifactId>zkclient</artifactId>
			<version>0.1</version>
		</dependency>
		<!-- dubbo 服务注册方式 end -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>
		<!-- quartz start -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>1.8.5</version>
		</dependency>
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<!-- Latest 2.3.x (not 2.4.x), at least 2.3.18 -->
			<version>[2.3.18,2.4)</version>
		</dependency>
		<dependency>
			<groupId>com.ginkgocap.ywxt</groupId>
			<artifactId>phoenix-util</artifactId>
			<version>${util.dependencied}</version>
			<exclusions>
				<exclusion>
					<artifactId>httpclient</artifactId>
					<groupId>org.apache.httpcomponents</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- httpclient -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.3</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcomponents-client</artifactId>
			<version>4.3.1</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.3.1</version>
		</dependency>
		<dependency>
			<groupId>com.gintong.frame</groupId>
			<artifactId>phoenix-frame-util</artifactId>
			<version>1.0.0-SNAPSHOT</version>
			<exclusions>
				<exclusion>
					<artifactId>jedis</artifactId>
					<groupId>redis.clients</groupId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/assembly</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/gen</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<filtering>true</filtering>
				<directory>src/test/resources</directory>
			</testResource>
			<testResource>
				<filtering>true</filtering>
				<directory>src/main/webapp</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<!-- 打jar包时候过滤掉dubbo.properties文件，使用最后发布包里conf下的属性文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<excludes>
						<excludes>**/conf/**</excludes>
						<excludes>**/assembly.xml</excludes>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>

				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/java</source>
								<source>src/main/gen</source>
							</sources>
						</configuration>
					</execution>
				</executions>

			</plugin>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.ginkgocap.ywxt</groupId>
									<artifactId>phoenix-util</artifactId>
									<version>${util.dependencied}</version>
									<outputDirectory>${project.build.directory}/dubbo</outputDirectory>
									<includes>META-INF/assembly/**</includes>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<descriptor>src/main/assembly/assembly.xml</descriptor>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<!-- 生成ibatis模型和dao -->
		<profile>
			<id>generatemybatis</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.mybatis.generator</groupId>
						<artifactId>mybatis-generator-maven-plugin</artifactId>
						<version>1.3.2</version>
						<configuration>
							<verbose>true</verbose>
							<overwrite>true</overwrite>
						</configuration>
						<dependencies>
							<dependency>
								<groupId>mysql</groupId>
								<artifactId>mysql-connector-java</artifactId>
								<version>5.1.12</version>
							</dependency>
							<dependency>
								<groupId>org.mybatis.generator</groupId>
								<artifactId>mybatis-generator-core</artifactId>
								<version>1.3.2</version>
							</dependency>
							<dependency>
								<groupId>org.mybatis</groupId>
								<artifactId>mybatis</artifactId>
								<version>3.2.2</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- 开发打包使用的profile -->
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

				<!-- 大数据搜索请求地址 -->
				<column.data.searchUrl>http://192.168.130.119:8090/</column.data.searchUrl>
				<!-- 大数据解析请求地址 -->
				<column.data.parseUrl>http://192.168.130.120:8000/async_data/</column.data.parseUrl>
				<!-- 大数据推送请求地址 -->
				<column.data.pushUrl>http://192.168.101.14:4453/</column.data.pushUrl>

				<!-- redis地址 -->
				<redis.host>192.168.101.131</redis.host>
				<!-- redis端口 -->
				<redis.port>6379</redis.port>
				<!-- mongo地址 -->
				<mongodb.address>192.168.101.131:27017</mongodb.address>
				<!-- mongo中数据库 -->
				<mongodb.database>column</mongodb.database>
				<!-- 数据库连接地址和数据库名 -->
				<jdbc.url>
					jdbc:mysql://192.168.101.131:3306/phoenix_column?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;zeroDateTimeBehavior=convertToNull
				</jdbc.url>
				<!-- 数据库访问帐号 -->
				<jdbc.username>zhangwei</jdbc.username>
				<!-- 数据库访问密码 -->
				<jdbc.password>zhangwei</jdbc.password>
				<!-- 日志级别，一般由大到小分为 debug info warn error 四个级别，越大日志越详细 -->
				<log4j.level>debug</log4j.level>
				<!-- 日志存储路径，多个项目可以用同一个路径，在该路径下每个项目会自动创建以项目名称命名的子文件夹 -->
				<log4j.path>./logs</log4j.path>
				<logback.path>d:/column-provider</logback.path>
				<qatest.schema.skip>false</qatest.schema.skip>
				<!-- dubbo注册中心的地址 -->
				<dubbo.application.name>columndubboprovider</dubbo.application.name>
				<dubbo.protocol.name>dubbo</dubbo.protocol.name>
				<dubbo.registry.address>zookeeper://192.168.101.131:2181?client=zkclient</dubbo.registry.address>
				<dubbo.protocol.port>8816</dubbo.protocol.port>
				<!-- 应用端的挂载配置路径 -->
				<linux.mount.path>/webserver/upload/column</linux.mount.path>
				<webserver.path>/root/apache-tomcat-6.0.36/webapps</webserver.path>
				<gen.path>/webserver/upload/column/GENFILE</gen.path>
				<nginx.root>http://file.dev.gintong.com</nginx.root>
			</properties>
		</profile>
		<profile>
			<!-- ci configuration -->
			<id>server</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<!-- redis地址 -->
				<redis.host>192.168.101.89</redis.host>
				<!-- redis端口 -->
				<redis.port>6379</redis.port>
				<!-- mongo地址 -->
				<mongodb.address>192.168.101.89:27017</mongodb.address>
				<!-- mongo中数据库 -->
				<mongodb.database>ywxt</mongodb.database>
				<!-- 数据库连接地址和数据库名 -->
				<jdbc.url>
					jdbc:mysql://192.168.101.89:3306/phoenix_column?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8
				</jdbc.url>
				<!-- 数据库访问帐号 -->
				<jdbc.username>root</jdbc.username>
				<!-- 数据库访问密码 -->
				<jdbc.password />
				<!-- 日志级别，一般由大到小分为 debug info warn error 四个级别，越大日志越详细 -->
				<log4j.level>debug</log4j.level>
				<!-- 日志存储路径，多个项目可以用同一个路径，在该路径下每个项目会自动创建以项目名称命名的子文件夹 -->
				<log4j.path>./logs</log4j.path>
				<qatest.schema.skip>false</qatest.schema.skip>
				<dubbo.application.name>columndubboprovider</dubbo.application.name>
				<dubbo.protocol.name>dubbo</dubbo.protocol.name>
				<dubbo.registry.address>zookeeper://192.168.101.88:2181?client=zkclient</dubbo.registry.address>
				<dubbo.protocol.port>2015</dubbo.protocol.port>
				<!-- 应用端的挂载配置路径 -->
				<linux.mount.path>/webserver/upload/column</linux.mount.path>
				<webserver.path>/webserver/tomcat/phoenix-column-web/ywxt</webserver.path>
				<gen.path>/webserver/upload/column/GENFILE</gen.path>
				<nginx.root>http://file.server.gintong.com:81</nginx.root>
			</properties>
			<build>
				<plugins>
					<!-- sql plugin -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<version>1.5</version>
						<!-- common configuration shared by all executions -->
						<dependencies>
							<!-- specify the dependent jdbc driver here -->
							<dependency>
								<groupId>mysql</groupId>
								<artifactId>mysql-connector-java</artifactId>
								<version>5.1.12</version>
							</dependency>
						</dependencies>
						<configuration>
							<driver>${jdbc.driverClassName}</driver>
							<username>${jdbc.username}</username>
							<password>${jdbc.password}</password>
							<url>${jdbc.url}</url>
							<!--all executions are ignored if -Dmaven.test.skip=true -->
						</configuration>
						<executions>
							<execution>
								<id>create-schema-server</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<autocommit>true</autocommit>
									<srcFiles>
										<srcFile>src/test/resources/sql/mysql/schema.sql</srcFile>
										<srcFile>src/test/resources/sql/mysql/default-data.sql</srcFile>
									</srcFiles>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>dbunit-maven-plugin</artifactId>
						<version>1.0-beta-3</version>
						<executions>
							<execution>
								<id>test-compile</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>operation</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>${jdbc.groupId}</groupId>
								<artifactId>${jdbc.artifactId}</artifactId>
								<version>${jdbc.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<dataTypeFactoryName> ${dbuint.dataTypeFactoryName}
							</dataTypeFactoryName>
							<driver>${jdbc.driverClassName}</driver>
							<username>${jdbc.username}</username>
							<password>${jdbc.password}</password>
							<url>${jdbc.url}</url>
							<src>src/test/resources/data/sample-data.xml</src>
							<type>CLEAN_INSERT</type>
							<skip>${maven.test.skip}</skip>
							<format>flat</format>
							<encoding>UTF-8</encoding>
							<dest>target/dbunit/export.xml</dest>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- qatest configuration -->
			<id>testOnline</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<!-- redis地址 -->
				<redis.host>192.168.101.42</redis.host>
				<!-- redis端口 -->
				<redis.port>6379</redis.port>
				<!-- 数据库连接地址和数据库名 -->
				<jdbc.url>
					jdbc:mysql://192.168.101.42:3306/phoenix_column?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8
				</jdbc.url>
				<!-- 数据库访问帐号 -->
				<jdbc.username>ph_column</jdbc.username>
				<!-- 数据库访问密码 -->
				<jdbc.password>aTadXdEb7VnqjqLc</jdbc.password>
				<!-- 日志级别，一般由大到小分为 debug info warn error 四个级别，越大日志越详细 -->
				<log4j.level>debug</log4j.level>
				<!-- 日志存储路径，多个项目可以用同一个路径，在该路径下每个项目会自动创建以项目名称命名的子文件夹 -->
				<log4j.path>./logs</log4j.path>
				<qatest.schema.skip>true</qatest.schema.skip>
				<dubbo.application.name>columndubboprovider</dubbo.application.name>
				<dubbo.protocol.name>dubbo</dubbo.protocol.name>
				<dubbo.registry.address>zookeeper://192.168.101.15:2181?client=zkclient</dubbo.registry.address>
				<dubbo.protocol.port>8816</dubbo.protocol.port>
				<!-- 应用端的挂载配置路径 -->
				<linux.mount.path>/webserver/upload/column</linux.mount.path>
				<webserver.path>/webserver/tomcat/phoenix-column-web/ywxt</webserver.path>
				<gen.path>/webserver/upload/column/GENFILE</gen.path>
				<nginx.root>http://file.qatest.gintong.com:81</nginx.root>
			</properties>
		</profile>

		<profile>
			<id>delivery</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<filters>
					<filter>${sa.config.file}</filter>
				</filters>
			</build>
		</profile>



		<profile>
			<id>online</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<filters>
					<filter>${sa.config.file}</filter>
				</filters>
			</build>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<!-- redis地址 -->
				<redis.host>${column.online.redis.host}</redis.host>
				<!-- redis端口 -->
				<redis.port>${column.online.redis.port}</redis.port>
				<!-- mongo地址 -->
				<mongodb.address>${column.online.mongodb.address}</mongodb.address>
				<!-- mongo中数据库 -->
				<mongodb.database>${column.online.mongodb.database}</mongodb.database>
				<!-- 数据库连接地址和数据库名 -->
				<jdbc.url>${column.online.jdbc.url}</jdbc.url>
				<!-- 数据库访问帐号 -->
				<jdbc.username>${column.online.jdbc.username}</jdbc.username>
				<!-- 数据库访问密码 -->
				<jdbc.password>${column.online.jdbc.password}</jdbc.password>
				<!-- 日志级别，一般由大到小分为 debug info warn error 四个级别，越大日志越详细 -->
				<log4j.level>${column.online.log4j.level}</log4j.level>
				<!-- 日志存储路径，多个项目可以用同一个路径，在该路径下每个项目会自动创建以项目名称命名的子文件夹 -->
				<log4j.path>${column.online.log4j.path}</log4j.path>
				<!-- dubbo注册中心的地址 -->
				<dubbo.application.name>${column.online.dubbo.application.name}</dubbo.application.name>
				<dubbo.protocol.name>${column.online.dubbo.protocol.name}</dubbo.protocol.name>
				<dubbo.registry.address>${column.online.dubbo.registry.address}</dubbo.registry.address>
				<dubbo.protocol.port>${column.online.dubbo.protocol.port}</dubbo.protocol.port>
				<nginx.root>${columnweb.online.nginx.root}</nginx.root>
				<linux.mount.path>${column.online.linux.mount.path}</linux.mount.path>
				<webserver.path>${column.online.webserver.path}</webserver.path>
				<gen.path>${column.online.gen.path}</gen.path>
			</properties>
		</profile>
	</profiles>
</project>
